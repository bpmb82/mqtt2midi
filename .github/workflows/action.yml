name: Build

on:
    push:
      tags:
        - 'v*'

jobs:
  build:
    # Set the job to run on the platform specified by the matrix below
    runs-on: ${{ matrix.runner }}
 
    # Define the build matrix for cross-compilation
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ${{ github.event.repository.name }}-linux-amd64.tar.gz
            asset_name: ${{ github.event.repository.name }}-linux-amd64
          - name: linux-arm64
            runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: ${{ github.event.repository.name }}-linux-arm64.tar.gz
            asset_name: ${{ github.event.repository.name }}-linux-arm64
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ${{ github.event.repository.name }}-windows-amd64.zip
            asset_name: ${{ github.event.repository.name }}-windows-amd64
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ${{ github.event.repository.name }}-macos-amd64.tar.gz
            asset_name: ${{ github.event.repository.name }}-macos-amd64
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin
            artifact_name: ${{ github.event.repository.name }}-macos-aarch64.tar.gz
            asset_name: ${{ github.event.repository.name }}-macos-aarch64
 
    # The steps to run for each matrix item
    steps:

      - name: Get tag
        id: tag
        uses: devops-actions/action-get-tag@v1.0.3

      - name: Install dependencies if target is Linux
        shell: bash
        run: |
          apt update && apt install -y gcc curl libasound2-dev libasound2 openssl pkg-config
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'aarch64-unknown-linux-gnu' }}

      - name: Checkout
        uses: actions/checkout@v3
 
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"
 
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
 
      - name: Build Binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
 
      - name: Release Binary
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi
 
          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${{ github.event.repository.name }}${BIN_SUFFIX}"

          # Create output folder
          mkdir -p /output
 
          # Define a better name for the final binary
          BIN_RELEASE="${{ github.event.repository.name }}-${{ matrix.name }}${BIN_SUFFIX}"
          BIN_RELEASE_VERSIONED="${{ github.event.repository.name }}-${{ steps.tag.outputs.tag }}-${{ matrix.name }}"
 
          # Move the built binary where you want it
          mv "${BIN_OUTPUT}" "/tmp/${BIN_RELEASE}"
          cd /tmp
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            zip ${{ matrix.artifact_name }} ${BIN_RELEASE}
            mv ${{ matrix.artifact_name }} /output
          else
            tar -czvf ${{ matrix.artifact_name }} ${BIN_RELEASE}
            mv ${{ matrix.artifact_name }} /output
          fi

      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.tag.outputs.tag }}
          tag_name: ${{ steps.tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: /output/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ steps.tag.outputs.tag }}
        
